name: Rollback to Production
on:
  workflow_dispatch:
    inputs:
      BRANCH:
           description: "Branch name"
    required: true
        default: "main"
        type: choice
        options:
          - "main"
          - "uae"
          - "pantheon-pipeline-v1"
      ENVIRONMENT:
        description: "Deployment Environment (dev/stage/prod)"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - stage
          - prod
      AWS_REGION:
        description: "AWS region to deploy infra"
        required: true
        default: "me-central-1"
        type: choice
        options:
          - "me-central-1"
          - "us-east-1"
      EKS_CLUSTER:
        description: "EKS cluster name"
        required: true
        type: choice
        options:
          - "zamp-prd-uae-cluster"
          - "ClusterName"
      NAMESPACE:
        description: "Namespace"
        required: true
        type: choice
        options:
          - "pantheon"
          - "test"
      HELM_REPOSITORY:
        description: "S3 helm repository name"
        required: true
        type: choice
        options:
          - "zamp-prd-uae-helmcharts"
          - "helmrepos3bucketname"
      ECR_REPO:
        description: "ECR repo name"
        required: true
        type: choice
        options:
          - "zamp-prd-uae-pantheon-ecr"
          - "ECR repo name"
      BUILD_ENV:
        description: "Build env"
        required: true
        type: choice
        options:
          - "awsprd"
          - "buildenv"
env:
  APP_NAME: pantheon
  GITHUB_ACTOR_SLACK: ${{ github.event.client_payload.github_actor }}

jobs:
  prepare-env:
    name: Prepare Env
    runs-on: ubuntu-latest
    timeout-minutes: 2
    env:
      BRANCH: ${{ github.event.inputs.BRANCH }}
      ENVIRONMENT: ${{ github.event.inputs.ENVIRONMENT }}
      AWS_REGION: ${{ github.event.inputs.AWS_REGION }}
      EKS_CLUSTER: ${{ github.event.inputs.EKS_CLUSTER }}
      NAMESPACE: ${{ github.event.inputs.NAMESPACE }}
      HELM_REPOSITORY: ${{ github.event.inputs.HELM_REPOSITORY }}
      ECR_REPO: ${{ github.event.inputs.ECR_REPO }}
      BUILD_ENV: ${{ github.event.inputs.BUILD_ENV }}
    outputs:
      APP_NAME: ${{ steps.vars.outputs.APP_NAME }}
      SLACK_WEBHOOK_URL: ${{ steps.vars.outputs.SLACK_WEBHOOK_URL }}
      STG_TRIGGER_TOKEN: ${{ github.event.client_payload.trigger_token }}
      PRD_TRIGGER_TOKEN: ${{ steps.vars.outputs.TRIGGER_TOKEN }}
      SSH_PRIVATE_KEY: ${{ steps.vars.outputs.SSH_PRIVATE_KEY }}
      HELM_CHART_NAME: ${{ steps.vars.outputs.HELM_CHART_NAME }}
      LABEL_SELECTOR: ${{ steps.vars.outputs.LABEL_SELECTOR }}
      APP_NAMES: ${{ steps.vars.outputs.APP_NAMES }}
      NEW_TAG: ${{ steps.tag.outputs.NEW_TAG }}
      AWS_ACCOUNT_ID: ${{ steps.set-account.outputs.AWS_ACCOUNT_ID }}
      ECR_REGISTRY: ${{ steps.registry.outputs.ECR_REGISTRY }}
    steps:
      - id: vars
        run: |
          echo "HELM_CHART_NAME=zamp-svc" >> $GITHUB_OUTPUT
          echo "APP_NAME=$APP_NAME" >> $GITHUB_OUTPUT
          echo "APP_NAMES=zamp-pantheon-svc,zamp-pantheon-svc-v2,zamp-pantheon-svc-worker" >> $GITHUB_OUTPUT
          echo "LABEL_SELECTOR=app.kubernetes.io/name" >> $GITHUB_OUTPUT
          echo "SLACK_WEBHOOK_URL=PRD_SLACK_WEBHOOK_URL" >> $GITHUB_OUTPUT
          echo "PRD_TRIGGER_TOKEN=PRD_TRIGGER_TOKEN" >> $GITHUB_OUTPUT
          echo "SSH_PRIVATE_KEY=SSH_PRIVATE_KEY" >> $GITHUB_OUTPUT
      - name: Output Branch name
        run: |
          echo ":seedling: Branch:${GITHUB_REF#refs/heads/}" >> $GITHUB_STEP_SUMMARY

      - name: "Checkout repository on ${{ github.event.inputs.BRANCH }}"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.BRANCH }}

      - name: Create a new tag version
        id: tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_TAG=$(echo "v$(($(git tag -l 'v*' --sort=-v:refname | head -n 1 | cut -c 2-)+1))")
          git tag $NEW_TAG
          git push origin $NEW_TAG
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Determine AWS AccountID based on environment
        id: set-account
        run: |
          if [[ "$ENVIRONMENT" == "prod" ]]; then
            echo "AWS_ACCOUNT_ID=916079538338" >> $GITHUB_ENV
            echo "::set-output name=AWS_ACCOUNT_ID::916079538338"
          elif [[ "$ENVIRONMENT" == "stage" ]]; then
            echo "AWS_ACCOUNT_ID=123456789" >> $GITHUB_ENV
            echo "::set-output name=AWS_ACCOUNT_ID::123456789"
          else
            echo "AWS_ACCOUNT_ID=0123456789" >> $GITHUB_ENV
            echo "::set-output name=AWS_ACCOUNT_ID::0123456789"
          fi

      - name: Construct AWS registry url
        id: registry
        run: |
          ECR_REGISTRY="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
          echo "::set-output name=ECR_REGISTRY::$ECR_REGISTRY"

      - name: Print selected values
        run: |
          echo "Branch: $BRANCH"
          echo "Environment: $ENVIRONMENT"
          echo "AWS Region: $AWS_REGION"
          echo "AWS Account ID: $AWS_ACCOUNT_ID"
          echo "EKS cluster: $EKS_CLUSTER"
          echo "Namespace: $NAMESPACE"
          echo "S3 helm repository: $HELM_REPOSITORY"
          echo "ECR repo: $ECR_REPO"
          echo "ECR registry: $ECR_REGISTRY"
          echo "Build env: $BUILD_ENV"
          echo "App name: $APP_NAME"
          echo "Slack webhook url: $SLACK_WEBHOOK_URL"
          echo "Prd trigger token: $PRD_TRIGGER_TOKEN"
          echo "SSH private key: $SSH_PRIVATE_KEY"
          echo "Helm chart name: $HELM_CHART_NAME"
          echo "Label selector: $LABEL_SELECTOR"
  build-push-image:
    needs:
      - prepare-env
    name: Build and Push Image
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [pantheon, pantheon-app-migrations]
    env:
      BRANCH: ${{ github.event.inputs.BRANCH }}
      ENVIRONMENT: ${{ github.event.inputs.ENVIRONMENT }}
      AWS_REGION: ${{ github.event.inputs.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{needs.prepare-env.outputs.AWS_ACCOUNT_ID}}
      EKS_CLUSTER: ${{ github.event.inputs.EKS_CLUSTER }}
      NAMESPACE: ${{ github.event.inputs.NAMESPACE }}
      HELM_REPOSITORY: ${{ github.event.inputs.HELM_REPOSITORY }}
      ECR_REPO: ${{ github.event.inputs.ECR_REPO }}
      ECR_REGISTRY: ${{ needs.prepare-env.outputs.ECR_REGISTRY }}
      APP_NAME: ${{ needs.prepare-env.outputs.APP_NAME }}
      SSH_PRIVATE_KEY: ${{ needs.prepare-env.outputs.SSH_PRIVATE_KEY }}
      NEW_TAG: ${{ needs.prepare-env.outputs.NEW_TAG }}
    outputs:
      IMAGE_TAG: ${{ steps.build.outputs.IMAGE_TAG }}
      ECR_REPO: ${{ steps.build.outputs.ECR_REPO }}
    steps:
      - name: "Checkout repository on ${{ github.event.inputs.BRANCH }}"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.BRANCH }}

      - name: 'Set up AWS credentials using OIDC'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession

      - name: "Login to Amazon ECR"
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - id: build
        name: Build and Push Image
        run: |
          APP_NAME=${{ matrix.app }}
          IMAGE_TAG=$NEW_TAG
          if [ "$APP_NAME" = "pantheon-app-migrations" ]; then
            aws ecr describe-repositories --repository-names $ECR_REPO-$APP_NAME || \
            aws ecr create-repository --repository-name $ECR_REPO-$APP_NAME
            docker build -f ./pantheon_v2/app-migrations/Dockerfile -t $ECR_REPO-$APP_NAME:$IMAGE_TAG ./pantheon_v2
            docker tag $ECR_REPO-$APP_NAME:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPO-$APP_NAME:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPO-$APP_NAME:$IMAGE_TAG
          else
            docker build -t $ECR_REPO:$IMAGE_TAG .
            docker tag $ECR_REPO:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
          fi
          echo "ECR_REPO=$ECR_REPO" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo ":whale2:App Image Tag: ${IMAGE_TAG} " >> $GITHUB_STEP_SUMMARY

  clear-migrations:
    name: Cleanup migrations
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      id-token: write
      contents: read
    needs:
      - prepare-env
      - build-push-image
    env:
      BRANCH: ${{ github.event.inputs.BRANCH }}
      ENVIRONMENT: ${{ github.event.inputs.ENVIRONMENT }}
      AWS_REGION: ${{ github.event.inputs.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{needs.prepare-env.outputs.AWS_ACCOUNT_ID}}
      EKS_CLUSTER: ${{ github.event.inputs.EKS_CLUSTER }}
      NAMESPACE: ${{ github.event.inputs.NAMESPACE }}
      ECR_REPO: ${{ github.event.inputs.ECR_REPO }}
      ECR_REGISTRY: ${{needs.prepare-env.outputs.ECR_REGISTRY}}
      IMAGE_TAG: ${{needs.build-push-image.outputs.IMAGE_TAG}}
      APP_NAME : ${{needs.prepare-env.outputs.APP_NAME}}
      HELM_CHART_NAME: ${{needs.prepare-env.outputs.HELM_CHART_NAME}}
      HELM_REPOSITORY: ${{github.event.inputs.HELM_REPOSITORY}}
      BUILD_ENV: ${{ github.event.inputs.BUILD_ENV }}
    steps:
      - name: "Checkout repository on ${{ github.event.inputs.BRANCH }}"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.BRANCH }}

      - name: 'Set up AWS credentials using OIDC'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession
      - name: "Set up kubectl"
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER
      - name: "Install Helm"
        uses: azure/setup-helm@v4
        with:
          version: "v3.7.2"

      - name: "Install Helm S3 Plugin"
        run: |
          helm plugin install https://github.com/hypnoglow/helm-s3.git
          helm plugin list

      - name: Clear Migrations
        run: |
          if [[ $(helm list -n $NAMESPACE | grep -c 'pantheon-app-migrations') -gt 0 ]]; then
            echo "Migration release found. Uninstalling..."
            helm uninstall pantheon-app-migrations -n $NAMESPACE --timeout 2m0s --wait
          else
            echo "No existing migration release found. Skipping."
          fi

  deploy-to-eks:
    strategy:
      matrix:
        app: [pantheon, pantheon-app-migrations]
    name: Deploy to EKS
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    timeout-minutes: 15
    needs:
      - prepare-env
      - build-push-image
      - clear-migrations
    env:
      BRANCH: ${{ github.event.inputs.BRANCH }}
      ENVIRONMENT: ${{ github.event.inputs.ENVIRONMENT }}
      AWS_REGION: ${{ github.event.inputs.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{needs.prepare-env.outputs.AWS_ACCOUNT_ID}}
      EKS_CLUSTER: ${{ github.event.inputs.EKS_CLUSTER }}
      NAMESPACE: ${{ github.event.inputs.NAMESPACE }}
      ECR_REPO: ${{ github.event.inputs.ECR_REPO }}
      ECR_REGISTRY: ${{needs.prepare-env.outputs.ECR_REGISTRY}}
      IMAGE_TAG: ${{needs.build-push-image.outputs.IMAGE_TAG}}
      APP_NAME : ${{needs.prepare-env.outputs.APP_NAME}}
      HELM_CHART_NAME: ${{needs.prepare-env.outputs.HELM_CHART_NAME}}
      HELM_REPOSITORY: ${{github.event.inputs.HELM_REPOSITORY}}
      BUILD_ENV: ${{ github.event.inputs.BUILD_ENV }}
    steps:
      - name: "Checkout repository on ${{ github.event.inputs.BRANCH }}"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.BRANCH }}

      - name: 'Set up AWS credentials using OIDC'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession

      - name: "Set up kubectl"
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER

      - name: "Install Helm"
        uses: azure/setup-helm@v4
        with:
          version: "v3.7.2"

      - name: "Install Helm S3 Plugin"
        run: |
          helm plugin install https://github.com/hypnoglow/helm-s3.git
          helm plugin list

      - name: Deploy
        run: |
          APP_NAME=${{ matrix.app }}
          if [ "$APP_NAME" = "pantheon-app-migrations" ]; then
            VALUES_FILE=helm/${BUILD_ENV}-${APP_NAME#pantheon-}-values.yaml
            ECR_REPO_NAME=$ECR_REPO-$APP_NAME
          else
            VALUES_FILE=helm/${BUILD_ENV}-values.yaml
            ECR_REPO_NAME=$ECR_REPO
          fi
          helm s3 init --ignore-if-exists s3://${HELM_REPOSITORY}
          helm repo add pantheon s3://${HELM_REPOSITORY}
          helm repo update
          helm upgrade --install ${APP_NAME} pantheon/${HELM_CHART_NAME} \
              --namespace ${NAMESPACE} \
              --set default.image.tag="${IMAGE_TAG}" \
              --values ${VALUES_FILE} \
              --wait \
              --timeout 4m0s \
              --force
  slack-notification:
    name: Slack Notification
    if: always()
    runs-on: ubuntu-latest
    needs:
      - prepare-env
      - build-push-image
      - deploy-to-eks
    env:
      SLACK_WEBHOOK_URL: ${{needs.prepare-env.outputs.SLACK_WEBHOOK_URL}}
      ENVIRONMENT: ${{ github.event.inputs.ENVIRONMENT }}
    steps:
      - uses: technote-space/workflow-conclusion-action@v3
      - name: Update slack message body
        id: body
        run: |
          if [ '${{ env.WORKFLOW_CONCLUSION }}' == 'success' ]; then
            echo "SLACK_MESSAGE=Success :white_check_mark:" >> $GITHUB_OUTPUT
          elif [ '${{ env.WORKFLOW_CONCLUSION }}' == 'failure' ]; then
            echo "SLACK_MESSAGE=Failed :x:" >> $GITHUB_OUTPUT
          elif [ '${{ env.WORKFLOW_CONCLUSION }}' == 'cancelled' ]; then
            echo "SLACK_MESSAGE=Cancelled :grey_exclamation:" >> $GITHUB_OUTPUT
          fi
      - name: Slack Notification
        uses: Zampfi/town_crier@v1
        env:
          SLACK_COLOR: ${{ env.WORKFLOW_CONCLUSION }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://media-exp1.licdn.com/dms/image/C4D0BAQEsXCky1jDBjw/company-logo_200_200/0/1650191766210?e=2147483647&v=beta&t=skUuL49MkcdxJZmEEN2wy5E7Xqy176Ar7EPsKoSMUEE
          SLACK_MESSAGE: ${{ steps.body.outputs.SLACK_MESSAGE }}
          SLACK_TITLE: Build Status
          ZAMP_ENV: ${{ env.ENVIRONMENT }}
          SLACK_FOOTER: "<${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>"
          SLACK_USERNAME: Zamp-Devops
          SLACK_WEBHOOK: ${{ secrets[env.SLACK_WEBHOOK_URL] }}
          SLACK_MSG_AUTHOR: ${{ env.GITHUB_ACTOR_SLACK }}
          GITHUB_CUSTOM_REF: "refs/heads/${{env.NEW_TAG}}"
