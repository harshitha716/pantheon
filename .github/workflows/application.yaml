name: Build and Deploy
on:
  workflow_dispatch:
    inputs:
      BRANCH:
        description: Branch name
        required: true
        default: main
        type: choice
        options:
          - main
          - temporal-sdk
          - development
      ENVIRONMENT:
        description: Deployment Environment (dev/stage/prod)
        required: true
        default: dev
        type: choice
        options:
          - dev
          - stage
          - prod
      AWS_REGION:
        description: AWS region to deploy infra
        required: true
        default: us-east-1
        type: choice
        options:
          - me-central-1
          - us-east-1
      EKS_CLUSTER:
        description: EKS cluster name
        required: true
        type: choice
        options:
          - zamp-prd-uae-cluster
          - zamp-dev-us-cluster
      NAMESPACE:
        description: Namespace
        required: true
        type: choice
        options:
          - hcp
          - test
      HELM_REPOSITORY:
        description: S3 helm repository name
        required: true
        type: choice
        options:
          - zamp-prd-uae-helmcharts
          - zamp-dev-us-helmcharts
      ECR_REPO:
        description: ECR repo name
        required: true
        type: choice
        options:
          - zamp-prd-uae-pantheon-ecr
          - zamp-dev-us-pantheon-ecr
      BUILD_ENV:
        description: Build env
        required: true
        type: choice
        options:
          - awsprd
          - dev
  paths-ignore:
    - helm/dev-values.yaml
    - helm/prd-values.yaml
    - helm/stg-values.yaml
    - .github/workflows/*
env:
  APP_NAME: hcp
jobs:
  prepare-env:
    name: Prepare Env
    runs-on: ubuntu-latest-m
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    timeout-minutes: 2
    env:
      BRANCH: ${{ github.event.inputs.BRANCH }}
      ENVIRONMENT: ${{ github.event.inputs.ENVIRONMENT }}
      AWS_REGION: ${{ github.event.inputs.AWS_REGION }}
      EKS_CLUSTER: ${{ github.event.inputs.EKS_CLUSTER }}
      NAMESPACE: ${{ github.event.inputs.NAMESPACE }}
      HELM_REPOSITORY: ${{ github.event.inputs.HELM_REPOSITORY }}
      ECR_REPO: ${{ github.event.inputs.ECR_REPO }}
      BUILD_ENV: ${{ github.event.inputs.BUILD_ENV }}
    outputs:
      APP_NAME: ${{ steps.vars.outputs.APP_NAME }}
      SLACK_WEBHOOK_URL: ${{ steps.vars.outputs.SLACK_WEBHOOK_URL }}
      STG_TRIGGER_TOKEN: ${{ github.event.client_payload.trigger_token }}
      PRD_TRIGGER_TOKEN: ${{ steps.vars.outputs.TRIGGER_TOKEN }}
      SSH_PRIVATE_KEY: ${{ steps.vars.outputs.SSH_PRIVATE_KEY }}
      HELM_CHART_NAME: ${{ steps.vars.outputs.HELM_CHART_NAME }}
      LABEL_SELECTOR: ${{ steps.vars.outputs.LABEL_SELECTOR }}
      APP_NAMES: ${{ steps.vars.outputs.APP_NAMES }}
      NEW_TAG: ${{ steps.tag.outputs.NEW_TAG }}
      AWS_ACCOUNT_ID: ${{ steps.set-account.outputs.AWS_ACCOUNT_ID }}
      ECR_REGISTRY: ${{ steps.registry.outputs.ECR_REGISTRY }}
    steps:
      - id: vars
        run: |
          echo "HELM_CHART_NAME=zamp-svc" >> $GITHUB_OUTPUT
          echo "APP_NAME=$APP_NAME" >> $GITHUB_OUTPUT
          echo "APP_NAMES=hcp-app-migrations, hcp-auth, hcp-api, hcp-dashboard, hcp-pinot-proxy, hcp-api-worker-default, hcp-api-worker-ops" >> $GITHUB_OUTPUT
          echo "LABEL_SELECTOR=app.kubernetes.io/name" >> $GITHUB_OUTPUT
          echo "SLACK_WEBHOOK_URL=PRD_SLACK_WEBHOOK_URL" >> $GITHUB_OUTPUT
          echo "PRD_TRIGGER_TOKEN=PRD_TRIGGER_TOKEN" >> $GITHUB_OUTPUT
          echo "SSH_PRIVATE_KEY=SSH_PRIVATE_KEY" >> $GITHUB_OUTPUT
      - name: Output Branch name
        run: echo ":seedling: Branch:${GITHUB_REF#refs/heads/}" >> $GITHUB_STEP_SUMMARY
      - name: Checkout repository on ${{ github.event.inputs.BRANCH }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.BRANCH }}
      - name: Create a new tag version
        id: tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_TAG=$(echo "v$(($(git tag -l 'v*' --sort=-v:refname | head -n 1 | cut -c 2-)+1))")
          git tag $NEW_TAG
          git push origin $NEW_TAG
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
      - name: Determine AWS AccountID based on environment
        id: set-account
        run: |
          if [[ "$ENVIRONMENT" == "prod" ]]; then
            echo "AWS_ACCOUNT_ID=916079538338" >> $GITHUB_ENV
            echo "::set-output name=AWS_ACCOUNT_ID::916079538338"
          elif [[ "$ENVIRONMENT" == "stage" ]]; then
            echo "AWS_ACCOUNT_ID=123456789" >> $GITHUB_ENV
            echo "::set-output name=AWS_ACCOUNT_ID::123456789"
          else
            echo "AWS_ACCOUNT_ID=0123456789" >> $GITHUB_ENV
            echo "::set-output name=AWS_ACCOUNT_ID::0123456789"
          fi
      - name: Construct AWS registry url
        id: registry
        run: |
          ECR_REGISTRY="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
          echo "::set-output name=ECR_REGISTRY::$ECR_REGISTRY"
      - name: Print selected values
        run: |
          echo "Branch: $BRANCH"
          echo "Environment: $ENVIRONMENT"
          echo "AWS Region: $AWS_REGION"
          echo "AWS Account ID: $AWS_ACCOUNT_ID"
          echo "EKS cluster: $EKS_CLUSTER"
          echo "Namespace: $NAMESPACE"
          echo "S3 helm repository: $HELM_REPOSITORY"
          echo "ECR repo: $ECR_REPO"
          echo "ECR registry: $ECR_REGISTRY"
          echo "Build env: $BUILD_ENV"
          echo "App name: $APP_NAME"
          echo "Slack webhook url: $SLACK_WEBHOOK_URL"
          echo "Prd trigger token: $PRD_TRIGGER_TOKEN"
          echo "SSH private key: $SSH_PRIVATE_KEY"
          echo "Helm chart name: $HELM_CHART_NAME"
          echo "Label selector: $LABEL_SELECTOR"
  build-push-image:
    needs:
      - prepare-env
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        app:
          - hcp-app-migrations
          - hcp-auth
          - hcp-api
          - hcp-dashboard
          - hcp-pinot-proxy
          - hcp-api-worker-default
          - hcp-api-worker-ops
    name: Build and Push Image
    runs-on: ubuntu-latest-m
    env:
      BRANCH: ${{ github.event.inputs.BRANCH }}
      ENVIRONMENT: ${{ github.event.inputs.ENVIRONMENT }}
      AWS_REGION: ${{ github.event.inputs.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{needs.prepare-env.outputs.AWS_ACCOUNT_ID}}
      EKS_CLUSTER: ${{ github.event.inputs.EKS_CLUSTER }}
      NAMESPACE: ${{ github.event.inputs.NAMESPACE }}
      HELM_REPOSITORY: ${{ github.event.inputs.HELM_REPOSITORY }}
      ECR_REPO: ${{ github.event.inputs.ECR_REPO }}
      ECR_REGISTRY: ${{ needs.prepare-env.outputs.ECR_REGISTRY }}
      APP_NAME: ${{ needs.prepare-env.outputs.APP_NAME }}
      SSH_PRIVATE_KEY: ${{ needs.prepare-env.outputs.SSH_PRIVATE_KEY }}
      NEW_TAG: ${{ needs.prepare-env.outputs.NEW_TAG }}
    outputs:
      IMAGE_TAG: ${{ steps.build.outputs.IMAGE_TAG }}
      ECR_REPO: ${{ steps.build.outputs.ECR_REPO }}
    steps:
      - name: Checkout repository on ${{ github.event.inputs.BRANCH }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.BRANCH }}
      - name: Set up AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession
      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - id: build
        name: Build and Push Image
        run: |
          APP_NAME=${{ matrix.app }}
          echo "Temporary if branch -- fix later"
          if [ "$APP_NAME" = "hcp-api-worker-default" ]; then
            DOCKERFILE="Dockerfile.worker.default"
            DIR_PATH="./services/api"
          elif [ "$APP_NAME" = "hcp-api-worker-ops" ]; then
            DOCKERFILE="Dockerfile.worker.ops"
            DIR_PATH="./services/api"
          else
            DOCKERFILE="Dockerfile"
            DIR_PATH="./services/${APP_NAME#hcp-}"
          fi
          IMAGE_TAG=$GITHUB_SHA
          echo "Building ${APP_NAME} with image tag ${IMAGE_TAG}"
          cd $DIR_PATH
          docker build -t $ECR_REPO:$IMAGE_TAG .
          docker tag $ECR_REPO:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
          echo "ECR_REPO=$ECR_REPO" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo ":whale2:App Image Tag: ${IMAGE_TAG} " >> $GITHUB_STEP_SUMMARY
  clear-migrations:
    name: Cleanup migrations
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      id-token: write
      contents: read
    needs:
      - prepare-env
      - build-push-image
    env:
      BRANCH: ${{ github.event.inputs.BRANCH }}
      ENVIRONMENT: ${{ github.event.inputs.ENVIRONMENT }}
      AWS_REGION: ${{ github.event.inputs.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{needs.prepare-env.outputs.AWS_ACCOUNT_ID}}
      EKS_CLUSTER: ${{ github.event.inputs.EKS_CLUSTER }}
      NAMESPACE: ${{ github.event.inputs.NAMESPACE }}
      ECR_REPO: ${{ github.event.inputs.ECR_REPO }}
      ECR_REGISTRY: ${{needs.prepare-env.outputs.ECR_REGISTRY}}
      IMAGE_TAG: ${{needs.build-push-image.outputs.IMAGE_TAG}}
      APP_NAME: ${{needs.prepare-env.outputs.APP_NAME}}
      HELM_CHART_NAME: ${{needs.prepare-env.outputs.HELM_CHART_NAME}}
      HELM_REPOSITORY: ${{github.event.inputs.HELM_REPOSITORY}}
      BUILD_ENV: ${{ github.event.inputs.BUILD_ENV }}
    steps:
      - name: Checkout repository on ${{ github.event.inputs.BRANCH }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.BRANCH }}
      - name: Set up AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession
      - name: Set up kubectl
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.7.2
      - name: Install Helm S3 Plugin
        run: |
          helm plugin install https://github.com/hypnoglow/helm-s3.git
          helm plugin list
      - name: Clear Migrations
        run: |
          if [[ $(helm list -n hcp | grep -c 'hcp-app-migrations') -gt 0 ]]; then
            echo "Migration release found. Uninstalling..."
            helm uninstall hcp-app-migrations -n hcp --timeout 2m0s --wait 
          else
            echo "No existing migration release found. Skipping."
          fi 
  deploy-app-migrations:
    name: Deploy App Migrations to K8s
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      id-token: write
      contents: read
    needs:
      - prepare-env
      - build-push-image
      - clear-migrations
    env:
      APP_NAME: hcp-app-migrations
      BRANCH: ${{ github.event.inputs.BRANCH }}
      ENVIRONMENT: ${{ github.event.inputs.ENVIRONMENT }}
      AWS_REGION: ${{ github.event.inputs.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{needs.prepare-env.outputs.AWS_ACCOUNT_ID}}
      EKS_CLUSTER: ${{ github.event.inputs.EKS_CLUSTER }}
      NAMESPACE: ${{ github.event.inputs.NAMESPACE }}
      ECR_REPO: ${{ github.event.inputs.ECR_REPO }}
      ECR_REGISTRY: ${{needs.prepare-env.outputs.ECR_REGISTRY}}
      IMAGE_TAG: ${{needs.build-push-image.outputs.IMAGE_TAG}}
      HELM_CHART_NAME: ${{needs.prepare-env.outputs.HELM_CHART_NAME}}
      HELM_REPOSITORY: ${{github.event.inputs.HELM_REPOSITORY}}
      BUILD_ENV: ${{ github.event.inputs.BUILD_ENV }}
    steps:
      - name: Checkout repository on ${{ github.event.inputs.BRANCH }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.BRANCH }}
      - name: Set up AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession
      - name: Set up kubectl
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.7.2
      - name: Install Helm S3 Plugin
        run: |
          helm plugin install https://github.com/hypnoglow/helm-s3.git
          helm plugin list
      - name: Deploy App Migrations
        run: |
          IMAGE_TAG=$GITHUB_SHA
          VALUES_FILE=helm/${BUILD_ENV}-app-migrations-values.yaml
          cat ${VALUES_FILE}
          echo "Deploying ${APP_NAME} with image tag ${IMAGE_TAG}"
          helm repo add ${K8S_NAMESPACE}-repo s3://${HELM_REPOSITORY} && helm repo update
          helm upgrade --install ${APP_NAME} ${K8S_NAMESPACE}-repo/${HELM_CHART_NAME} \
          --namespace ${K8S_NAMESPACE} \
          --set default.image.repository="${ECR_REPO}" \
          --set default.image.tag="${IMAGE_TAG}" \
          --values helm/${BUILD_ENV}-app-migrations-values.yaml \
          --wait \
          --timeout 12m0s \
          --create-namespace
          
          # Check if the job completed successfully
          echo "Checking job status for ${APP_NAME}..."
          sleep 10 # Give some time for the job to start
          
          # Check if job exists
          if ! kubectl get jobs zamp-hcp-app-migrations-app-migrations -n ${K8S_NAMESPACE} &> /dev/null; then
            echo "Error: No job found for ${APP_NAME}"
            exit 1
          fi
          
          # Check if job failed
          echo "Checking job status for ${APP_NAME}..."
          JOB_STATUS=$(kubectl get jobs zamp-hcp-app-migrations-app-migrations -n ${K8S_NAMESPACE} -o=jsonpath='{.status.conditions[?(@.type=="Failed")].status}')
          if [ "$JOB_STATUS" == "True" ]; then
            echo "Error: Job ${APP_NAME} failed"
            exit 1
          fi
          
          echo "Job ${APP_NAME} is running successfully or has completed"
  deploy-other-services:
    strategy:
      matrix:
        app:
          - hcp-auth
          - hcp-api
          - hcp-dashboard
          - hcp-pinot-proxy
          - hcp-api-worker-default
          - hcp-api-worker-ops
    name: Deploy Other Services to K8s
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      id-token: write
      contents: read
    needs:
      - prepare-env
      - build-push-image
      - deploy-app-migrations
    env:
      APP_NAME: hcp-app-migrations
      BRANCH: ${{ github.event.inputs.BRANCH }}
      ENVIRONMENT: ${{ github.event.inputs.ENVIRONMENT }}
      AWS_REGION: ${{ github.event.inputs.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{needs.prepare-env.outputs.AWS_ACCOUNT_ID}}
      EKS_CLUSTER: ${{ github.event.inputs.EKS_CLUSTER }}
      NAMESPACE: ${{ github.event.inputs.NAMESPACE }}
      ECR_REPO: ${{ github.event.inputs.ECR_REPO }}
      ECR_REGISTRY: ${{needs.prepare-env.outputs.ECR_REGISTRY}}
      IMAGE_TAG: ${{needs.build-push-image.outputs.IMAGE_TAG}}
      HELM_CHART_NAME: ${{needs.prepare-env.outputs.HELM_CHART_NAME}}
      HELM_REPOSITORY: ${{github.event.inputs.HELM_REPOSITORY}}
      BUILD_ENV: ${{ github.event.inputs.BUILD_ENV }}
    steps:
      - name: Checkout repository on ${{ github.event.inputs.BRANCH }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.BRANCH }}
      - name: Set up AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession
      - name: Set up kubectl
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.7.2
      - name: Install Helm S3 Plugin
        run: |
          helm plugin install https://github.com/hypnoglow/helm-s3.git
          helm plugin list
      - name: Deploy
        run: |
          IMAGE_TAG=$GITHUB_SHA
          APP_NAME=${{ matrix.app }}
          ECR_REPO=asia-southeast1-docker.pkg.dev/development-351109/zamp-dev-sg-container-repo/${APP_NAME}
          VALUES_FILE=helm/${BUILD_ENV}-${APP_NAME#hcp-}-values.yaml
          cat ${VALUES_FILE}
          echo "Deploying ${APP_NAME} with image tag ${IMAGE_TAG}"
          helm repo add ${K8S_NAMESPACE}-repo s3://${HELM_REPOSITORY} && helm repo update
          helm upgrade --install ${APP_NAME} ${K8S_NAMESPACE}-repo/${HELM_CHART_NAME} \
          --namespace ${K8S_NAMESPACE} \
          --set default.image.repository="${ECR_REPO}" \
          --set default.image.tag="${IMAGE_TAG}" \
          --values helm/${BUILD_ENV}-${APP_NAME#hcp-}-values.yaml \
          --wait \
          --timeout 12m0s \
          --create-namespace
  slack-notification:
    name: Slack Notification
    if: always()
    runs-on: ubuntu-latest
    needs:
      - prepare-env
      - build-push-image
      - deploy-app-migrations
      - deploy-other-services
    env:
      SLACK_WEBHOOK_URL: ${{needs.prepare-env.outputs.SLACK_WEBHOOK_URL}}
      ENVIRONMENT: ${{needs.prepare-env.outputs.ENVIRONMENT}}
    steps:
      - uses: technote-space/workflow-conclusion-action@v3
      - name: Update slack message body and environment
        id: body
        run: |
          if [ '${{ env.WORKFLOW_CONCLUSION }}' == 'success' ]
          then
            echo "SLACK_MESSAGE=Success :white_check_mark:" >> $GITHUB_OUTPUT
          elif [ '${{ env.WORKFLOW_CONCLUSION }}'  == 'failure' ]
          then
            echo "SLACK_MESSAGE=Failed :x:"   >> $GITHUB_OUTPUT
          elif [ '${{ env.WORKFLOW_CONCLUSION }}'  == 'cancelled' ]
          then
            echo "SLACK_MESSAGE=Cancelled :grey_exclamation:"   >> $GITHUB_OUTPUT
          fi
      - name: Slack Notification
        uses: Zampfi/town_crier@main
        env:
          SLACK_COLOR: ${{ env.WORKFLOW_CONCLUSION }}
          SLACK_ICON: https://media-exp1.licdn.com/dms/image/C4D0BAQEsXCky1jDBjw/company-logo_200_200/0/1650191766210?e=2147483647&v=beta&t=skUuL49MkcdxJZmEEN2wy5E7Xqy176Ar7EPsKoSMUEE
          SLACK_MESSAGE: ${{ steps.body.outputs.SLACK_MESSAGE }}
          SLACK_TITLE: Build Status
          SLACK_FOOTER: <${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>
          ZAMP_ENV: ${{ env.ENVIRONMENT }}
          SLACK_USERNAME: Zamp-Devops
          SLACK_WEBHOOK: ${{ secrets[env.SLACK_WEBHOOK_URL] }}
